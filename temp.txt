    def deep_search(self, slide, target, branch, right_most_coor=0, bottom_most_coor=0, count=0):
        target_id = target['target'][0]
        target_shape = target['target'][1]
        offset_x = target_shape.left + Inches(0.1)
        x_offset_h = target_shape.width / 4
        gap = 0.85 * target_shape.height  
        min_child_gap = Inches(0.1)
        
        # Initialize local count for this call
        local_count = count
        
        if target_id in branch:
            subordinates = branch[target_id]
            total_height_used = 0
            node_positions = []
            max_sibling_bottom = bottom_most_coor
            
            for i, subordinate in enumerate(subordinates):
                local_count += 1  # Count this subordinate
                
                y_pos = target_shape.top + (1 + 0.85 * (i + total_height_used)) * target_shape.height
                y_pos = max(y_pos, max_sibling_bottom + min_child_gap)
                
                # Store exact connection point (middle of horizontal line)
                connection_y = y_pos + gap
                node_positions.append(connection_y)
                
                # Horizontal connector (from vertical line to box)
                slide.shapes.add_connector(
                    MSO_CONNECTOR.STRAIGHT,
                    int(offset_x), int(connection_y),
                    int(offset_x + x_offset_h), int(connection_y)
                )
                
                # Employee box
                shape = slide.shapes.add_shape(
                    MSO_SHAPE.RECTANGLE,
                    int(offset_x + x_offset_h),
                    int(connection_y - Inches(0.2)),  # Centered vertically
                    Inches(1), Inches(0.55) # Adjust
                )
                
                triangle_width = Inches(0.25)
                triangle_height = Inches(0.25)
                triangle_left = offset_x + x_offset_h
                triangle_top = connection_y + Inches(0.07)
                
                triangle = slide.shapes.add_shape(
                MSO_SHAPE.RIGHT_TRIANGLE,
                triangle_left,
                triangle_top,
                triangle_width,
                triangle_height 
                )

                triangle.rotation = 0
                triangle.fill.solid()
                triangle.fill.fore_color.rgb = RGBColor(255, 255, 255)
                triangle.line.color.rgb = RGBColor(10, 80, 220)

                # Use correct descendant count (including itself)
                descendant_count = self.get_descendant_count(subordinate['Employee ID'], branch)

                triangle.text_frame.word_wrap = False
                triangle.text = str(descendant_count)
                triangle.text_frame.paragraphs[0].font.size = Pt(8.5)
                triangle.text_frame.paragraphs[0].font.bold = True
                triangle.text_frame.paragraphs[0].font.color.rgb = RGBColor(10, 80, 110)
                triangle.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
                triangle.text_frame.vertical_anchor = MSO_ANCHOR.MIDDLE

                # Update coordinates
                current_right = offset_x + x_offset_h + Inches(0.8)
                current_bottom = connection_y + Inches(0.2)
                right_most_coor = max(right_most_coor, current_right)
                bottom_most_coor = max(bottom_most_coor, current_bottom)
                max_sibling_bottom = bottom_most_coor
                
                # Style the shape
                text = f"{subordinate['Department']}\n{subordinate['Name']} ({subordinate['Employee ID']})"
                shape.text_frame.text = text
                shape.text_frame.vertical_anchor = MSO_ANCHOR.TOP  # Vertically center the text
                
                for i, paragraph in enumerate(shape.text_frame.paragraphs):
                    paragraph.alignment = PP_ALIGN.CENTER  # Horizontally center
                    paragraph.font.size = Pt(10)
                    paragraph.font.color.rgb = RGBColor(255, 255, 255)
                    if i == 0:
                        paragraph.font.bold = True
                    

                
                # Recursive processing
                new_target_id = subordinate['Employee ID']
                if new_target_id in branch:
                    first_child_top = connection_y + min_child_gap
                    required_space = first_child_top - y_pos
                    if gap < required_space:
                        y_pos += (required_space - gap)
                    
                    subtree_height, right_most_coor, subtree_bottom, local_count = self.deep_search(
                        slide, 
                        {"target": (new_target_id, shape)}, 
                        branch, 
                        right_most_coor,
                        bottom_most_coor,
                        count=local_count  # Pass the updated count
                    )
                    total_height_used += subtree_height
                    max_sibling_bottom = max(max_sibling_bottom, subtree_bottom)
                else:
                    total_height_used += 1
            
            # Draw vertical line (EXACTLY between first and last connection points)
            if node_positions:
                last_connection = max(node_positions)
                
                # Vertical line starts at parent's bottom and ends at last connection
                parent_bottom = target_shape.top + target_shape.height
                slide.shapes.add_connector(
                    MSO_CONNECTOR.STRAIGHT,
                    int(offset_x), int(parent_bottom),
                    int(offset_x), int(last_connection)
                )
            
            return len(subordinates) + total_height_used, right_most_coor, max_sibling_bottom, local_count
        
        return -1, right_most_coor, bottom_most_coor, local_count
    
    def get_descendant_count(self, emp_id, branch):
        if emp_id not in branch:
            return 1
        return 1 + sum(self.get_descendant_count(child['Employee ID'], branch) for child in branch[emp_id])

